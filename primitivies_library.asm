 
 L_Car:
	PUSH(FP);
	MOV(FP,SP);
	/*Check number of arguments recived is legal*/
	CMP(FPARG(1),IMM(1));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	/*Check that type is T_PAIR*/
	MOV(R1,FPARG(2)); /*R1<-contains the pair item*/
	CMP(IND(R1),IMM(T_PAIR));
	JUMP_NE(L_ERROR_INCORRECT_TYPE_ERROR_NOT_PAIR);
	MOV(R0,INDD(R1,1));
	POP(FP);
	RETURN;


L_Cdr:
	PUSH(FP);
	MOV(FP,SP);
	/*Check number of arguments recived is legal*/
	CMP(FPARG(1),IMM(1));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	/*Check that type is T_PAIR*/
	MOV(R1,FPARG(2)); /*R1<-contains the pair item*/
	CMP(IND(R1),IMM(T_PAIR));
	JUMP_NE(L_ERROR_INCORRECT_TYPE_ERROR_NOT_PAIR);
	MOV(R0,INDD(R1,2));
	POP(FP);
	RETURN;


IS_Boolean:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(1));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2));
	CMP(IND(R1),IMM(T_BOOL));
	JUMP_EQ(L_BOOL_TRUE);
	MOV(R0, SOB_FALSE);
	JUMP(L_EXIT_BOOL);
	L_BOOL_TRUE:
	MOV(R0, SOB_TRUE);
	L_EXIT_BOOL:
	POP(FP);
	RETURN;
	
IS_Void:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(1));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2));
	CMP(IND(R1),IMM(T_VOID));
	JUMP_EQ(L_VOID_TRUE);
	MOV(R0, SOB_FALSE);
	JUMP(L_EXIT_VOID);
	L_VOID_TRUE:
	MOV(R0, SOB_TRUE);
	L_EXIT_VOID:
	POP(FP);
	RETURN;
	
IS_Nil:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(1));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2));
	CMP(IND(R1),IMM(T_NIL));
	JUMP_EQ(L_NIL_TRUE);
	MOV(R0, SOB_FALSE);
	JUMP(L_EXIT_NIL);
	L_NIL_TRUE:
	MOV(R0, SOB_TRUE);
	L_EXIT_NIL:
	POP(FP);
	RETURN;
	
IS_Char:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(1));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2));
	CMP(IND(R1),IMM(T_CHAR));
	JUMP_EQ(L_CHAR_TRUE);
	MOV(R0, SOB_FALSE);
	JUMP(L_EXIT_CHAR);
	L_CHAR_TRUE:
	MOV(R0, SOB_TRUE);
	L_EXIT_CHAR:
	POP(FP);
	RETURN;
	
IS_Integer:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(1));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2));
	CMP(IND(R1),IMM(T_INTEGER));
	JUMP_EQ(L_INTEGER_TRUE);
	MOV(R0, SOB_FALSE);
	JUMP(L_EXIT_INTEGER);
	L_INTEGER_TRUE:
	MOV(R0, SOB_TRUE);
	L_EXIT_INTEGER:
	POP(FP);
	RETURN;
	
IS_String:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(1));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2));
	CMP(IND(R1),IMM(T_STRING));
	JUMP_EQ(L_STRING_TRUE);
	MOV(R0, SOB_FALSE);
	JUMP(L_EXIT_STRING);
	L_STRING_TRUE:
	MOV(R0, SOB_TRUE);
	L_EXIT_STRING:
	POP(FP);
	RETURN;
	
	
IS_Symbol:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(1));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2));
	CMP(IND(R1),IMM(T_SYMBOL));
	JUMP_EQ(L_SYMBOL_TRUE);
	MOV(R0, SOB_FALSE);
	JUMP(L_EXIT_SYMBOL);
	L_SYMBOL_TRUE:
	MOV(R0, SOB_TRUE);
	L_EXIT_SYMBOL:
	POP(FP);
	RETURN;
	
IS_Pair:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(1));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2));
	CMP(IND(R1),IMM(T_PAIR));
	JUMP_EQ(L_PAIR_TRUE);
	MOV(R0, SOB_FALSE);
	JUMP(L_EXIT_PAIR);
	L_PAIR_TRUE:
	MOV(R0, SOB_TRUE);
	L_EXIT_PAIR:
	POP(FP);
	RETURN;
	
IS_Vector:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(1));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2));
	CMP(IND(R1),IMM(T_VECTOR));
	JUMP_EQ(L_VECTOR_TRUE);
	MOV(R0, SOB_FALSE);
	JUMP(L_EXIT_VECTOR);
	L_VECTOR_TRUE:
	MOV(R0, SOB_TRUE);
	L_EXIT_VECTOR:
	POP(FP);
	RETURN;
	
IS_Closure:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(1));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2));
	CMP(IND(R1),IMM(T_CLOSURE));
	JUMP_EQ(L_CLOSURE_TRUE);
	MOV(R0, SOB_FALSE);
	JUMP(L_EXIT_CLOSURE);
	L_CLOSURE_TRUE:
	MOV(R0, SOB_TRUE);
	L_EXIT_CLOSURE:
	POP(FP);
	RETURN;
	
IS_Zero:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(1));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2));
	CMP(INDD(R1,1),IMM(0));
	JUMP_EQ(L_IS_ZERO_TRUE);
	MOV(R0, SOB_FALSE);
	JUMP(L_EXIT_IS_ZERO);
	L_IS_ZERO_TRUE:
	MOV(R0, SOB_TRUE);
	L_EXIT_IS_ZERO:
	POP(FP);
	RETURN;
	
 MAKE_CONS:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(IMM(3));
	CALL(MALLOC);
	DROP(1);
	MOV(IND(R0), T_PAIR);
	MOV(INDD(R0, 1), FPARG(2));
	MOV(INDD(R0, 2), FPARG(3));
	POP(FP);
	RETURN;
	
SET_CAR:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(2));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R0,FPARG(2)); /*R1<-contains the pair item*/
	CMP(IND(R0),IMM(T_PAIR));
	JUMP_NE(L_ERROR_INCORRECT_TYPE_ERROR_NOT_PAIR);
	MOV(R1,FPARG(3));
	MOV(INDD(R0,1),R1);
	MOV(R0, SOB_VOID);
	POP(FP);
	RETURN;
	
SET_CDR:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(2));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R0,FPARG(2)); /*R1<-contains the pair item*/
	CMP(IND(R0),IMM(T_PAIR));
	JUMP_NE(L_ERROR_INCORRECT_TYPE_ERROR_NOT_PAIR);
	MOV(R1,FPARG(3));
	MOV(INDD(R0,2),R1);
	MOV(R0, SOB_VOID);
	POP(FP);
	RETURN;
	
VECTOR_LENGTH:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(1));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R0,FPARG(2));
	CMP(IND(R0), IMM(T_VECTOR));
	JUMP_NE(L_INCORRECT_TYPE);
	PUSH(INDD(R0,1));
	CALL(MAKE_SOB_INTEGER);
	DROP(1);
	POP(FP);
	RETURN;
	
	
VECTOR_REF:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(2));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R0,FPARG(2));
	CMP(IND(R0), IMM(T_VECTOR));
	JUMP_NE(L_INCORRECT_TYPE);
	MOV(R1,FPARG(3));
	CMP(IND(R1), IMM(T_INTEGER));
	JUMP_NE(L_INCORRECT_TYPE);
	ADD(R0, INDD(R1,1));
	ADD(R0, 2);
	MOV(R0, IND(R0));
	POP(FP);
	RETURN;
	
	
VECTOR_SET:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(3));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R0,FPARG(2));
	CMP(IND(R0), IMM(T_VECTOR));
	JUMP_NE(L_INCORRECT_TYPE);
	MOV(R1,FPARG(3));
	CMP(IND(R1), IMM(T_INTEGER));
	JUMP_NE(L_INCORRECT_TYPE);
	MOV(R1, FPARG(3));
	ADD(R0, INDD(R1,1));
	ADD(R0, 2);
	MOV(IND(R0), FPARG(4));
	MOV(R0, SOB_VOID);
	POP(FP);
	RETURN;
	
VECTOR:	
   PUSH(FP);
	MOV(FP,SP);
	MOV(R2,FPARG(1)); 
	MOV(R3,IMM(0)); 
	MOV(R4,2);  
	CREATE_VECTOR:
	CMP(R3,R2);
	JUMP_EQ(EXIT_VECTOR);
	MOV(R5, FPARG(R4));
	PUSH(R5);
	ADD(R3,1);
	ADD(R4,1);
	JUMP(CREATE_VECTOR);
	EXIT_VECTOR:  
	PUSH(R2);
	CALL(MAKE_SOB_VECTOR);
	POP(R2);
	DROP(R2);
	POP(FP);
	RETURN;

MAKE_VECTOR:
	PUSH(FP);
	MOV(FP,SP);
	MOV(R2,FPARG(2));
	MOV(R2,INDD(R2,1));
	MOV(R4,R2);
	CMP(FPARG(1),IMM(1));
	JUMP_EQ(MAKE_VECTOR_ONE_ARG);
	MOV(R3,FPARG(3));
	JUMP(MAKE_VECTOR_LOOP);
	MAKE_VECTOR_ONE_ARG:
	MOV(R6,IMM(0));
	PUSH(R6);
	CALL(MAKE_SOB_INTEGER);
	DROP(1);
	MOV(R3,R0);
	MAKE_VECTOR_LOOP:
	CMP(R2,IMM(0));
	JUMP_EQ(MAKE_VECTOR_END);
	PUSH(R3);
	DECR(R2);
	JUMP(MAKE_VECTOR_LOOP);
	MAKE_VECTOR_END:
	PUSH(R4);
	CALL(MAKE_SOB_VECTOR);
	DROP(1);
	DROP(R4);
	POP(FP);
	RETURN;

STRING_LENGTH:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(1));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R0,FPARG(2));
	CMP(IND(R0), IMM(T_STRING));
	JUMP_NE(L_INCORRECT_TYPE);
	PUSH(INDD(R0,1));
	CALL(MAKE_SOB_INTEGER);
	DROP(1);
	POP(FP);
	RETURN;
	
STRING_REF:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(2));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R0,FPARG(2));
	CMP(IND(R0), IMM(T_STRING));
	JUMP_NE(L_INCORRECT_TYPE);
	MOV(R1,FPARG(3));
	CMP(IND(R1), IMM(T_INTEGER));
	JUMP_NE(L_INCORRECT_TYPE);
	ADD(R0, INDD(R1,1));
	ADD(R0, 2);
	PUSH(IND(R0));
	CALL(MAKE_SOB_CHAR);
	DROP(1);
	POP(FP);
	RETURN;	
	
STRING_SET:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(3));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R0,FPARG(2));
	CMP(IND(R0), IMM(T_STRING));
	JUMP_NE(L_INCORRECT_TYPE);
	MOV(R1,FPARG(3));
	CMP(IND(R1), IMM(T_INTEGER));
	JUMP_NE(L_INCORRECT_TYPE);	
	MOV(R0,FPARG(2));
	MOV(R1,FPARG(3));
	ADD(R0, INDD(R1,1));
	ADD(R0, 2);
	MOV(R1,FPARG(4));
	MOV(IND(R0), INDD(R1, 1));
	MOV(R0, SOB_VOID);
	POP(FP);
	RETURN;
	
MAKE_STRING:
	PUSH(FP);
	MOV(FP,SP);
	MOV(R2,FPARG(2));
	MOV(R2,INDD(R2,1));
	MOV(R4,R2);
	MOV(R3,0);
	CMP(FPARG(1),IMM(1));
	JUMP_EQ(MAKE_STRING_LOOP);
	MOV(R3,FPARG(3));
	MOV(R3,INDD(R3,1));
	MAKE_STRING_LOOP:
	CMP(R2,IMM(0));
	JUMP_EQ(MAKE_STRING_END);
	PUSH(R3);
	DECR(R2);
	JUMP(MAKE_STRING_LOOP);
	MAKE_STRING_END:
	PUSH(R4);
	CALL(MAKE_SOB_STRING);
	DROP(1);
	DROP(R4);
	POP(FP);
	RETURN;
	 
	 
	 
BINARY_ADD:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(2));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2));
	MOV(R3,FPARG(3));
	
	CMP(IND(R1),IMM(T_INTEGER));
	JUMP_NE(FIRST_ARG_FRACTION);
	MOV(R2,IMM(1));
	JUMP(FIRST_MONE);
	FIRST_ARG_FRACTION:
	MOV(R2,INDD(R1,2));
	FIRST_MONE:
	MOV(R1,INDD(R1,1));
	
	CMP(IND(R3),IMM(T_INTEGER));
	JUMP_NE(SECOND_ARG_FRACTION);
	MOV(R4,IMM(1));
	JUMP(SECOND_MONE);
	SECOND_ARG_FRACTION:
	MOV(R4,INDD(R3,2));
	SECOND_MONE:
	MOV(R3,INDD(R3,1));

	PUSH(R2);
	PUSH(R4);
	CALL(GCD);
	DROP(2);
	MOV(R5,R4);
	MUL(R5,R2);
	DIV(R5,R0);
	MOV(R0,R5);
	MOV(R5,R0);
	DIV(R5,R2);
	MOV(R2,R5);
	MOV(R5,R0);
	DIV(R5,R4);
	MOV(R4,R5);
	
	MUL(R1,R2);
	MUL(R3,R4);
	ADD(R1,R3);
	MOV(R2,R0);
	MOV(R3,R1);
	DIV(R3,R2);
	CMP(R3,IMM(0));
	JUMP_EQ(CREATE_FRACTION_ADD);
	MOV(R3,R1);
	REM(R3,R2);
	CMP(R3,IMM(0));
	JUMP_NE(CREATE_FRACTION_ADD);
	DIV(R1,R2);
	CREATE_INTEGER_ADD:
	PUSH(R1);
	CALL(MAKE_SOB_INTEGER);
	DROP(1);
	JUMP(ADD_EXIT);
	
	CREATE_FRACTION_ADD:
	MOV(R3,R1);
	REM(R3,R2);
	CMP(R3,IMM(0));
	JUMP_EQ(CREATE_INTEGER_ADD);
	PUSH(R0);
	PUSH(R1);
	CALL(MAKE_SOB_FRACTION);
	DROP(2);
	
	ADD_EXIT:
	POP(FP);
	RETURN;
	
	
BINARY_SUB:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(2));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2));
	MOV(R3,FPARG(3));
	
	CMP(IND(R1),IMM(T_INTEGER));
	JUMP_NE(FIRST_ARG_FRACTION_SUB);
	MOV(R2,IMM(1));
	JUMP(FIRST_MONE_SUB);
	FIRST_ARG_FRACTION_SUB:
	MOV(R2,INDD(R1,2));
	FIRST_MONE_SUB:
	MOV(R1,INDD(R1,1));
	
	CMP(IND(R3),IMM(T_INTEGER));
	JUMP_NE(SECOND_ARG_FRACTION_SUB);
	MOV(R4,IMM(1));
	JUMP(SECOND_MONE_SUB);
	SECOND_ARG_FRACTION_SUB:
	MOV(R4,INDD(R3,2));
	SECOND_MONE_SUB:
	MOV(R3,INDD(R3,1));

	PUSH(R2);
	PUSH(R4);
	CALL(GCD);
	DROP(2);
	MOV(R5,R4);
	MUL(R5,R2);
	DIV(R5,R0);
	MOV(R0,R5);
	MOV(R5,R0);
	DIV(R5,R2);
	MOV(R2,R5);
	MOV(R5,R0);
	DIV(R5,R4);
	MOV(R4,R5);
	
	MUL(R1,R2);
	MUL(R3,R4);
	SUB(R1,R3);
	MOV(R2,R0);
	MOV(R3,R1);
	DIV(R3,R2);
	CMP(R3,IMM(0));
	JUMP_EQ(CREATE_FRACTION_SUB);
	MOV(R3,R1);
	REM(R3,R2);
	CMP(R3,IMM(0));
	JUMP_NE(CREATE_FRACTION_SUB);
	DIV(R1,R2);
	CREATE_INTEGER_SUB:
	PUSH(R1);
	CALL(MAKE_SOB_INTEGER);
	DROP(1);
	JUMP(SUB_EXIT);
	
	CREATE_FRACTION_SUB:
	MOV(R3,R1);
	REM(R3,R2);
	CMP(R3,IMM(0));
	JUMP_EQ(CREATE_INTEGER_SUB);
	PUSH(R0);
	PUSH(R1);
	CALL(MAKE_SOB_FRACTION);
	DROP(2);
	
	SUB_EXIT:
	POP(FP);
	RETURN;
	

BINARY_MUL:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(2));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2));
	MOV(R3,FPARG(3));
	CMP(IND(R1),IMM(T_INTEGER));
	JUMP_NE(FIRST_ARG_FRACTION_MUL);
	MOV(R2,IMM(1));
	JUMP(FIRST_MONE_MUL);
	FIRST_ARG_FRACTION_MUL:
	MOV(R2,INDD(R1,2));
	FIRST_MONE_MUL:
	MOV(R1,INDD(R1,1));
	CMP(IND(R3),IMM(T_INTEGER));
	JUMP_NE(SECOND_ARG_FRACTION_MUL);
	MOV(R4,IMM(1));
	JUMP(SECOND_MONE_MUL);
	SECOND_ARG_FRACTION_MUL:
	MOV(R4,INDD(R3,2));
	SECOND_MONE_MUL:
	MOV(R3,INDD(R3,1));;
	MUL(R1,R3);
	MUL(R2,R4);
	PUSH(R1);
	PUSH(R2);
	CALL(GCD);
	DROP(2);
	CMP(R0,IMM(0));
	JUMP_GE(GCD_POSITIVE);
	MUL(R0,IMM(-1));
	GCD_POSITIVE:
	DIV(R1,R0);
	DIV(R2,R0);
	MOV(R3,R1);
	DIV(R3,R2);
	CMP(R3,IMM(0));
	JUMP_EQ(CREATE_FRACTION_MUL);
	MOV(R3,R1);
	REM(R3,R2);
	CMP(R3,IMM(0));
	JUMP_NE(CREATE_FRACTION_MUL);
	DIV(R1,R2);
	CREATE_INTEGER_MUL:
	PUSH(R1);
	CALL(MAKE_SOB_INTEGER);
	DROP(1);
	JUMP(MUL_EXIT);
	CREATE_FRACTION_MUL:
	MOV(R3,R1);
	REM(R3,R2);
	CMP(R3,IMM(0));
	JUMP_EQ(CREATE_INTEGER_MUL);
	PUSH(R2);
	PUSH(R1);
	CALL(MAKE_SOB_FRACTION);
	DROP(2);
	MUL_EXIT:
	POP(FP);
	RETURN;
	
BLA:
	PUSH(FP);
	MOV(FP, SP);
	MOV(R0,SOB_VOID);
	POP(FP);
	RETURN;
	
		
BLA2:
	PUSH(FP);
	MOV(FP, SP);
	MOV(R0,SOB_VOID);
	POP(FP);
	RETURN;
	
BINARY_DIV:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(2));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2));
	MOV(R3,FPARG(3));
	
	CMP(IND(R1),IMM(T_INTEGER));
	JUMP_NE(FIRST_ARG_FRACTION_DIV);
	MOV(R2,IMM(1));
	JUMP(FIRST_MONE_DIV);
	FIRST_ARG_FRACTION_DIV:
	MOV(R2,INDD(R1,2));
	FIRST_MONE_DIV:
	MOV(R1,INDD(R1,1));
	
	CMP(IND(R3),IMM(T_INTEGER));
	JUMP_NE(SECOND_ARG_FRACTION_DIV);
	MOV(R4,INDD(R3,1));
	MOV(R3,IMM(1));
	JUMP(SECOND_MONE_DIV);
	SECOND_ARG_FRACTION_DIV:
	MOV(R4,INDD(R3,1));
	MOV(R3,INDD(R3,2));
	SECOND_MONE_DIV:
	MUL(R1,R3);
	MUL(R2,R4);
	PUSH(R1);
	PUSH(R2);
	CALL(GCD);
	DROP(2);
	CMP(R0,IMM(0));
	JUMP_GE(GCD_POSITIVE_DIV);
	MUL(R0,IMM(-1));
	GCD_POSITIVE_DIV:
	DIV(R1,R0);
	DIV(R2,R0);
	MOV(R3,R1);
	DIV(R3,R2);
	CMP(R3,IMM(0));
	JUMP_EQ(CREATE_FRACTION_DIV);
	MOV(R3,R1);
	REM(R3,R2);
	CMP(R3,IMM(0));
	JUMP_NE(CREATE_FRACTION_DIV);
	DIV(R1,R2);
	CREATE_INTEGER_DIV:
	PUSH(R1);
	CALL(MAKE_SOB_INTEGER);
	DROP(1);
	JUMP(DIV_EXIT);
	CREATE_FRACTION_DIV:
	MOV(R3,R1);
	REM(R3,R2);
	CMP(R3,IMM(0));
	JUMP_EQ(CREATE_INTEGER_DIV);
	PUSH(R2);
	PUSH(R1);
	CALL(MAKE_SOB_FRACTION);
	DROP(2);
	DIV_EXIT:
	POP(FP);
	RETURN;

	
BINARY_EQ:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(2));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2));
	MOV(R3,FPARG(3));
	CMP(IND(R1),IND(R3));
	JUMP_NE(EQ_FALSE);
	CMP(IND(R1),IMM(T_INTEGER));
	JUMP_NE(EQ_FRACTION);
	CMP(INDD(R1,1),INDD(R3,1));
	JUMP_NE(EQ_FALSE);
EQ_TRUE:
	MOV(R0,SOB_TRUE);
	JUMP(EQ_EXIT);
EQ_FRACTION:
	CMP(INDD(R1,1),INDD(R3,1));
	JUMP_NE(EQ_FALSE);
	CMP(INDD(R1,2),INDD(R3,2));
	JUMP_NE(EQ_FALSE);
	JUMP(EQ_TRUE);
EQ_FALSE:
	MOV(R0,SOB_FALSE);
EQ_EXIT:
	POP(FP);
	RETURN;

	
BINARY_GT:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(2));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2));
	MOV(R3,FPARG(3));
	
	CMP(IND(R1),IMM(T_INTEGER));
	JUMP_NE(FIRST_ARG_FRACTION_GT);
	MOV(R2,IMM(1));
	JUMP(FIRST_MONE_GT);
	FIRST_ARG_FRACTION_GT:
	MOV(R2,INDD(R1,2));
	FIRST_MONE_GT:
	MOV(R1,INDD(R1,1));
	
	CMP(IND(R3),IMM(T_INTEGER));
	JUMP_NE(SECOND_ARG_FRACTION_GT);
	MOV(R4,IMM(1));
	JUMP(SECOND_MONE_GT);
	SECOND_ARG_FRACTION_GT:
	MOV(R4,INDD(R3,2));
	SECOND_MONE_GT:
	MOV(R3,INDD(R3,1));
	
	MOV(R0,R2);
	MUL(R0,R4);
	MOV(R5,R0);
	DIV(R5,R2);
	MOV(R2,R5);
	DIV(R0,R4);
	MOV(R4,R0);
	MUL(R2,R1);
	MUL(R4,R3);
	CMP(R2,R4);
	JUMP_GT(GT_TRUE);
	MOV(R0,SOB_FALSE);
	JUMP(GT_END);
	GT_TRUE:
	MOV(R0,SOB_TRUE);
	GT_END:
	POP(FP);
	RETURN;
	
BINARY_LT:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(2));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2));
	MOV(R3,FPARG(3));
	
	CMP(IND(R1),IMM(T_INTEGER));
	JUMP_NE(FIRST_ARG_FRACTION_LT);
	MOV(R2,IMM(1));
	JUMP(FIRST_MONE_LT);
	FIRST_ARG_FRACTION_LT:
	MOV(R2,INDD(R1,2));
	FIRST_MONE_LT:
	MOV(R1,INDD(R1,1));
	
	CMP(IND(R3),IMM(T_INTEGER));
	JUMP_NE(SECOND_ARG_FRACTION_LT);
	MOV(R4,IMM(1));
	JUMP(SECOND_MONE_LT);
	SECOND_ARG_FRACTION_LT:
	MOV(R4,INDD(R3,2));
	SECOND_MONE_LT:
	MOV(R3,INDD(R3,1));
	
	MOV(R0,R2);
	MUL(R0,R4);
	MOV(R5,R0);
	DIV(R5,R2);
	MOV(R2,R5);
	DIV(R0,R4);
	MOV(R4,R0);
	MUL(R2,R1);
	MUL(R4,R3);
	CMP(R4,R2);
	JUMP_GT(LT_TRUE);
	MOV(R0,SOB_FALSE);
	JUMP(LT_END);
	LT_TRUE:
	MOV(R0,SOB_TRUE);
	LT_END:
	POP(FP);
	RETURN;
	
NUMERATOR:
	PUSH(FP);
	MOV(FP,SP);
	CMP(FPARG(1),IMM(1));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2)); 
	CMP(IND(R1),IMM(T_FRACTION));
	JUMP_EQ(TAKE_NUMERATOR);
	CMP(IND(R1),IMM(T_INTEGER));
	JUMP_NE(L_INCORRECT_TYPE);
	TAKE_NUMERATOR:
	MOV(R0,INDD(R1,1));
	PUSH(R0);
	CALL(MAKE_SOB_INTEGER);
	DROP(1);
	POP(FP);
	RETURN;


DENOMINATOR:
	PUSH(FP);
	MOV(FP,SP);
	CMP(FPARG(1),IMM(1));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2)); 
	CMP(IND(R1),IMM(T_FRACTION));
	JUMP_EQ(TAKE_DENOMINATOR);
	CMP(IND(R1),IMM(T_INTEGER));
	JUMP_NE(L_INCORRECT_TYPE);
	MOV(INDD(R1,2),IMM(1));
	TAKE_DENOMINATOR:
	MOV(R0,INDD(R1,2));
	PUSH(R0);
	CALL(MAKE_SOB_INTEGER);
	DROP(1);
	POP(FP);
	RETURN;
	
IS_NUMBER:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(1));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2));
	CMP(IND(R1),IMM(T_FRACTION));
	JUMP_EQ(L_NUMBER_TRUE);
	CMP(IND(R1),IMM(T_INTEGER));
	JUMP_EQ(L_NUMBER_TRUE);
	MOV(R0, SOB_FALSE);
	JUMP(L_EXIT_NUMBER);
	L_NUMBER_TRUE:
	MOV(R0, SOB_TRUE);
	L_EXIT_NUMBER:
	POP(FP);
	RETURN;




IS_RATIONEL:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(1));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2));
	CMP(IND(R1),IMM(T_FRACTION));
	JUMP_EQ(L_FRACTION_TRUE);
	CMP(IND(R1),IMM(T_INTEGER));
	JUMP_EQ(L_FRACTION_TRUE);
	MOV(R0, SOB_FALSE);
	JUMP(L_EXIT_FRACTION);
	L_FRACTION_TRUE:
	MOV(R0, SOB_TRUE);
	L_EXIT_FRACTION:
	POP(FP);
	RETURN;
	
REMAINDER:

	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(1), IMM(2));
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R1,FPARG(2));
	MOV(R2,FPARG(3));
	CMP(IND(R1),IMM(T_INTEGER));
	JUMP_NE(L_INCORRECT_TYPE);
	CMP(IND(R2),IMM(T_INTEGER));
	JUMP_NE(L_INCORRECT_TYPE);
	MOV(R1,INDD(R1,1));
	REM(R1,INDD(R2,1));
	PUSH(R1);
	CALL(MAKE_SOB_INTEGER);
	DROP(1);
	POP(FP);
	RETURN;
	
SYMBOL_TO_STRING:

	PUSH(FP);
	MOV(FP,SP);
	CMP(FPARG(1),1);
	JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
	MOV(R0,FPARG(2)); 
	CMP(IND(R0),T_SYMBOL);
	JUMP_NE(L_INCORRECT_TYPE);
	MOV(R0,INDD(R0,1));
	POP(FP);
	RETURN;
	
TYPES_IS_EQ:
  PUSH(FP);
  MOV(FP,SP);
  CMP(FPARG(1),IMM(2)); 
  JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
  MOV(R0,FPARG(2));
  MOV(R1,FPARG(3));
  CMP(IND(R0),IND(R1));
  JUMP_NE(TYPE_EQ_FALSE);
  CMP(IND(R0),T_INTEGER);
  JUMP_EQ(TYPE_IS_EQ_BY_VALUE);
  CMP(IND(R0),T_CHAR);
  JUMP_EQ(TYPE_IS_EQ_BY_VALUE);
  CMP(IND(R0),T_SYMBOL);
  JUMP_EQ(TYPE_IS_EQ_BY_VALUE);
  CMP(IND(R0),T_FRACTION);
  JUMP_EQ(TYPE_EQ_FRACTION);
TYPE_IS_EQ_BY_ADDRESS:
  CMP(R0,R1);
  JUMP_EQ(TYPE_EQ_TRUE);
  JUMP(TYPE_EQ_FALSE);
TYPE_EQ_FRACTION:
  CMP(INDD(R0,1),INDD(R1,1));
  JUMP_NE(TYPE_EQ_FALSE);
   CMP(INDD(R0,2),INDD(R1,2));
  JUMP_EQ(TYPE_EQ_TRUE);  
  
TYPE_IS_EQ_BY_VALUE:
  CMP(INDD(R0,1),INDD(R1,1));
  JUMP_EQ(TYPE_EQ_TRUE);
TYPE_EQ_FALSE:
  MOV(R0,SOB_FALSE);
  JUMP(TYPE_EQ_END);
TYPE_EQ_TRUE:
  MOV(R0,SOB_TRUE);

TYPE_EQ_END:
  POP(FP)
  RETURN;


APPLY:
	PUSH(FP);
	MOV(FP,SP);
	PUSH(IMM(SOB_NIL));
	PUSH(FPARG(3));
	CALL(REVERSE);
	DROP(2);
	MOV(R6,R0);
	MOV(R0,FPARG(1));
	MOV(R1,FPARG(-2));
	MOV(R2,FPARG(-1));
	MOV(R3,FPARG(2));
	DROP(6);
	MOV(R5,IMM(0)); 
	LOOP_APPLY_ARGS:
	CMP(R6,IMM(SOB_NIL));
	JUMP_EQ(APPLY_PUSH_ARG_END);
	INCR(R5);
	PUSH(INDD(R6,1));
	MOV(R6,INDD(R6,2));
	JUMP(LOOP_APPLY_ARGS);
	APPLY_PUSH_ARG_END:
	PUSH(R5);
	PUSH(INDD(R3,1));
	PUSH(R2);
	MOV(FP,R1);
	JUMPA(INDD(R3,2));
	DROP(1);
	POP(R1);
	DROP(R1);
	POP(FP);
	RETURN;

REVERSE:
	PUSH(FP);
	MOV(FP, SP);
	CMP(FPARG(0), IMM(SOB_NIL)); 
	JUMP_NE(REVERSE_NOT_EMPTY);
	MOV(R0, FPARG(1));
	JUMP(REVERSE_EXIT);
REVERSE_NOT_EMPTY:
	PUSH(FPARG(1));			
	PUSH(INDD(FPARG(0), 1));
	CALL(MAKE_SOB_PAIR);
	DROP(2);
	PUSH(R0);
	PUSH(INDD(FPARG(0), 2));
	CALL(REVERSE);
	DROP(2);
REVERSE_EXIT:
	POP(FP);
	RETURN;






STRING_TO_SYMBOL:

	//get-value-address
	GET_STRING_ADDRESS:
		PUSH(FP);
		MOV(FP ,SP);
		//START
		CMP(FPARG(1),IMM(1)); //compare gets 1 strings!
		JUMP_NE(L_INCORRECT_NUMBER_OF_ARGS_ERROR);
		MOV(R1,FPARG(2));

		//R12 HEAD OF linked list
		MOV(R2,IND(R12 )); //head of list
		MOV(R9, R12);
								

		CMP(R2,0);
		JUMP_EQ(EMPTY_SYMBOL_TABLE);
		LOOP_FIND_STRING: //Symbol table is empty
			//fake stack

			PUSH(R2);
			PUSH(R1); //arg2
			
			PUSH(IMM(2)); //number of args
			PUSH(IMM(547939936));//env
			CALL(STRING_COMPARE);
			//R0 HAS TRUE OR FALSE
			DROP(4);
			CMP(R0 ,SOB_FALSE);
			JUMP_EQ(LOOP_FIND_STRING_FALSE);

			MOV(R1,R2);
			JUMP(GET_STRING_ADDRESS_EXIT);
			
			LOOP_FIND_STRING_FALSE:
			//FALSE

			CMP(R9 ,IMM(0));
			JUMP_EQ(CREATE_NEW_STRING_ADD_LAST);
			MOV(R9,INDD(R9 ,1));
			MOV(R2,IND(R9) );
			JUMP(LOOP_FIND_STRING);




		///////R1 HOLDS THE STRING
		CREATE_NEW_STRING_ADD_LAST:
		//NEW NODE
		PUSH(2);
		CALL(MALLOC);
		DROP(1);
		MOV(INDD(R0,0),R1);
		MOV(INDD(R0,1), 0);
		MOV(INDD(R2,1),R0);
		JUMP(GET_STRING_ADDRESS_EXIT);

		//CASE THERE ARE NO SYBOL TABLE
		EMPTY_SYMBOL_TABLE:
		PUSH(2);
		CALL(MALLOC);
		DROP(1);
		MOV(INDD(R0,0),R1);
		MOV(INDD(R0,1), 0);
		MOV(R12,R0);

	GET_STRING_ADDRESS_EXIT:
		MOV(R0,R1);

	PUSH(R0);
	CALL(MAKE_SOB_SYMBOL);
	DROP(1);


	POP(FP);
	RETURN;





STRING_COMPARE:
	PUSH(FP);
	MOV(FP ,SP);

	MOV(R1,FPARG(2));
	MOV(R2,FPARG(3));
	
	MOV(R3 ,INDD(R1 ,1));
	CMP(R3 , INDD(R2 ,1) ); //CHECK LENGTHS
	JUMP_NE(STRING_COMPARE_FALSE); 	//check the length of both strings is equal.

	//INDD(R1,2) = FIRST ASSCII VALUE OF STRING_1
	//INDD(R2,2) = FIRST ASSCII VALUE OF STRING_2
	//R3 = containts the length of the string. N +2   //r4 =   i =2
	
	ADD(R3,2);
	MOV(R4 ,IMM(2)); 

	LOOP_CHECK_ASSCI_VAL:
		CMP(R4 , R3);
		JUMP_EQ(STRING_COMPARE_TRUE);
		CMP(INDD(R1, R4) , INDD(R2 ,R4) );	//  R1[i] = R2[i]
		JUMP_NE(STRING_COMPARE_FALSE);
		INCR(R4);//i++
		JUMP(LOOP_CHECK_ASSCI_VAL);


	STRING_COMPARE_FALSE:
		MOV(R0, SOB_FALSE);
		JUMP(STRING_COMPARE_EXIT);

	STRING_COMPARE_TRUE:
		MOV(R0, SOB_TRUE);	
   
	STRING_COMPARE_EXIT:

	POP(FP);
	RETURN;
	